samtyy@SAMTYY-PC1:/mnt/c/Users/samty/Desktop/Assignment 1_2/Assignment 1/bomb003$ gdb bomb
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...done.
(gdb) break phase_4
Breakpoint 1 at 0x400ffa
(gdb) r result.txt
Starting program: /mnt/c/Users/samty/Desktop/Assignment 1_2/Assignment 1/bomb003/bomb result.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
2 798
Halfway there!
6 2

Breakpoint 1, 0x0000000000400ffa in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x0000000000400ffa <+0>:     sub    $0x18,%rsp                     //makes stack frame of 18 bytes
   0x0000000000400ffe <+4>:     mov    %fs:0x28,%rax
   0x0000000000401007 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040100c <+18>:    xor    %eax,%eax
   0x000000000040100e <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401013 <+25>:    mov    %rsp,%rdx
   0x0000000000401016 <+28>:    mov    $0x4025af,%esi                 //Format of the answer: %d %d
   0x000000000040101b <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401020 <+38>:    cmp    $0x2,%eax                      //If value in %eax not equal to 2, bomb will explode  

   0x0000000000401023 <+41>:    jne    0x40102b <phase_4+49>          //If not jumps to phase_4+49

   0x0000000000401025 <+43>:    cmpl   $0xe,(%rsp)                    //0xe = 14 (compare 14 with first input (6))

   0x0000000000401029 <+47>:    jbe    0x401030 <phase_4+54>          //if first input is <= 14, jump to line <+54>

   0x000000000040102b <+49>:    callq  0x40142a <explode_bomb>        //if first input > 14, bomb explode

   0x0000000000401030 <+54>:    mov    $0xe,%edx                      //%edx = 14
   0x0000000000401035 <+59>:    mov    $0x0,%esi                      //%esi = 0

   0x000000000040103a <+64>:    mov    (%rsp),%edi                    //%edi = (%rsp)first input

   0x000000000040103d <+67>:    callq  0x400fbc <func4>               //calls <func4>

   0x0000000000401042 <+72>:    cmp    $0x2,%eax                      //compare value 2 with the value in %rax (first input)

   0x0000000000401045 <+75>:    jne    0x40104e <phase_4+84>          //If not equal than will jump to line <+84> and the bomb will explode

   0x0000000000401047 <+77>:    cmpl   $0x2,0x4(%rsp)                 //compare value 2 with the value in 0x4(%rsp) (second input)

   0x000000000040104c <+82>:    je     0x401053 <phase_4+89>          //If equal, jump to line<+89> (if 2 == second input DONE)

   0x000000000040104e <+84>:    callq  0x40142a <explode_bomb>        //else, bomb explode
   0x0000000000401053 <+89>:    mov    0x8(%rsp),%rax                
   0x0000000000401058 <+94>:    xor    %fs:0x28,%rax
   0x0000000000401061 <+103>:   je     0x401068 <phase_4+110>
   0x0000000000401063 <+105>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401068 <+110>:   add    $0x18,%rsp
   0x000000000040106c <+114>:   retq
End of assembler dump.

(gdb) i r                                                       //i r (information register displays the information/values of every register) 
							      
rax            0x2      2
rbx            0x7fffffffe3b8   140737488348088
rcx            0x0      0
rdx            0x7fffffffe2b4   140737488347828
rsi            0x0      0
rdi            0x7fffffffdc40   140737488346176
rbp            0x4021e0 0x4021e0 <__libc_csu_init>
rsp            0x7fffffffe2b0   0x7fffffffe2b0
r8             0x0      0
r9             0x0      0
r10            0x7ffff7b80c40   140737349422144
r11            0x4025b4 4203956
r12            0x400c60 4197472
r13            0x7fffffffe3b0   140737488348080
r14            0x0      0
r15            0x0      0
rip            0x401025 0x401025 <phase_4+43>
eflags         0x246    [ PF ZF IF ]
cs             0x33     51
ss             0x2b     43
ds             0x0      0
es             0x0      0
fs             0x0      0
gs             0x0      0
k0             0x0      0
k1             0x0      0
k2             0x0      0
k3             0x0      0
k4             0x0      0
k5             0x0      0
k6             0x0      0
---Type <return> to continue, or q <return> to quit---
k7             0x0      0
 
(gdb) x/d 0x7fffffffe2b0      //to check the value stored in %rsp                     
0x7fffffffe2b0: 6     //First input

(gdb) p/x *(int *)($rsp + 0x4)  //to check the value stores in 0x4(%rsp)
$1 = 0x2      //second input

(gdb) u *0x000000000040103d    //execute instruction until it reaches to that particular line.
0x000000000040103d in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000400ffa <+0>:     sub    $0x18,%rsp
   0x0000000000400ffe <+4>:     mov    %fs:0x28,%rax
   0x0000000000401007 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040100c <+18>:    xor    %eax,%eax
   0x000000000040100e <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401013 <+25>:    mov    %rsp,%rdx
   0x0000000000401016 <+28>:    mov    $0x4025af,%esi
   0x000000000040101b <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>   0x0000000000401020 <+38>:    cmp    $0x2,%eax
   0x0000000000401023 <+41>:    jne    0x40102b <phase_4+49>
   0x0000000000401025 <+43>:    cmpl   $0xe,(%rsp)
   0x0000000000401029 <+47>:    jbe    0x401030 <phase_4+54>
   0x000000000040102b <+49>:    callq  0x40142a <explode_bomb>
   0x0000000000401030 <+54>:    mov    $0xe,%edx
   0x0000000000401035 <+59>:    mov    $0x0,%esi
   0x000000000040103a <+64>:    mov    (%rsp),%edi
=> 0x000000000040103d <+67>:    callq  0x400fbc <func4>
   0x0000000000401042 <+72>:    cmp    $0x2,%eax
   0x0000000000401045 <+75>:    jne    0x40104e <phase_4+84>
   0x0000000000401047 <+77>:    cmpl   $0x2,0x4(%rsp)
   0x000000000040104c <+82>:    je     0x401053 <phase_4+89>
   0x000000000040104e <+84>:    callq  0x40142a <explode_bomb>
   0x0000000000401053 <+89>:    mov    0x8(%rsp),%rax
   0x0000000000401058 <+94>:    xor    %fs:0x28,%rax
   0x0000000000401061 <+103>:   je     0x401068 <phase_4+110>
   0x0000000000401063 <+105>:   callq  0x400b00 <__stack_chk_fail@plt>
---Type <return> to continue, or q <return> to quit---
   0x0000000000401068 <+110>:   add    $0x18,%rsp
   0x000000000040106c <+114>:   retq
End of assembler dump.

(gdb) si       //to get inside the function
0x0000000000400fbc in func4 ()
(gdb) disas
Dump of assembler code for function func4:                   //Assembly code for <func4>

=> 0x0000000000400fbc <+0>:     sub    $0x8,%rsp             //makes stack frame of 8 bytes

   0x0000000000400fc0 <+4>:     mov    %edx,%eax             //eax = 14

   0x0000000000400fc2 <+6>:     sub    %esi,%eax             //eax = eax - esi; eax = 14 - 0 = 14(%eax)

   0x0000000000400fc4 <+8>:     mov    %eax,%ecx             //ecx = 14
   0x0000000000400fc6 <+10>:    shr    $0x1f,%ecx            //0x1f = 31; ecx = 14 >> 31; returns most sigfig bit (0)

   0x0000000000400fc9 <+13>:    add    %ecx,%eax             //eax = eax + ecx; eax = 14 + 0 = 14

   0x0000000000400fcb <+15>:    sar    %eax                  //eax = eax >> 1; 14 >> 1 (eax = 7)

   0x0000000000400fcd <+17>:    lea    (%rax,%rsi,1),%ecx    //ecx = eax + rsi (7 + 0 = 7)ecx = 7

   0x0000000000400fd0 <+20>:    cmp    %edi,%ecx             //compares edi (first input) with value in ecx (7)

   0x0000000000400fd2 <+22>:    jle    0x400fe0 <func4+36>   //if 7 <= first input, jump pass recursion call

   0x0000000000400fd4 <+24>:    lea    -0x1(%rcx),%edx       //edx = rcx - 1

   0x0000000000400fd7 <+27>:    callq  0x400fbc <func4>      //back to beginning

   0x0000000000400fdc <+32>:    add    %eax,%eax             //eax = eax + eax
   0x0000000000400fde <+34>:    jmp    0x400ff5 <func4+57>
   0x0000000000400fe0 <+36>:    mov    $0x0,%eax             //eax = 0
   0x0000000000400fe5 <+41>:    cmp    %edi,%ecx             //compares edi (first input) with ecx (7)

   0x0000000000400fe7 <+43>:    jge    0x400ff5 <func4+57>   //%eax >= edi(7) >= first input

   0x0000000000400fe9 <+45>:    lea    0x1(%rcx),%esi        //%esi = 1 + %rcx = %esi = 1 + 7 = 8, we are incrementing rcx each time

   0x0000000000400fec <+48>:    callq  0x400fbc <func4>      //Goes back to beginning
   0x0000000000400ff1 <+53>:    lea    0x1(%rax,%rax,1),%eax
   0x0000000000400ff5 <+57>:    add    $0x8,%rsp             //We are returning back eax which we want to be 2
   0x0000000000400ff9 <+61>:    retq
End of assembler dump.

(gdb) delete break
Delete all breakpoints? (y or n) y
(gdb) r result.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/samty/Desktop/Assignment 1_2/Assignment 1/bomb003/bomb result.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
2 798
Halfway there!
4 2
So you got that one.  Try this one.


To conclude:
We know our number needs to be below 14 and this problem involves recursion. 
We also know that last input needs to be 2. 
So our format for the answer is "x 2". 
After trying with all possible number which are below 14, finally when we try it with an input of "4 2", bomb gets defused.


