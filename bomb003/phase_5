(gdb) break phase_5
Breakpoint 1 at 0x40106d
(gdb) r result.txt
Starting program: /mnt/c/Users/samty/Desktop/Assignment 1_2/Assignment 1/bomb003/bomb result.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
2 798
Halfway there!
4 2
So you got that one.  Try this one.
2 8

Breakpoint 1, 0x000000000040106d in phase_5 ()
(gdb) disas

Dump of assembler code for function phase_5:
=> 	0x000000000040107b <+0>:	sub    $0x18,%rsp
   	0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   	0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   	0x000000000040108d <+18>:	xor    %eax,%eax
   	0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   	0x0000000000401094 <+25>:	mov    %rsp,%rdx
   	0x0000000000401097 <+28>:	mov    $0x4025b7,%esi      	       //input format: %d %d
   	0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   	
(gdb) x/s 0x4025b7 //check the input format stored in this address
0x4025b7:	"%d %d"  	
   	
   	
=>  	0x00000000004010a1 <+38>:	cmp    $0x1,%eax    			//1 compare with the values stored in %eax(2)
   	0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   	0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>

// The value stored in the %eax(2) is compared with 1. 
//If the value stored in %eax is greater, it jumps to next instruction or else the explode bomb function is called.

   	
   	0x00000000004010ab <+48>:	mov    (%rsp),%eax    			//%rsp: 5 moved to %eax
=>  	0x00000000004010ae <+51>:	and    $0xf,%eax         		// AND operation is performed with the value stored in %eax and 0xf (15);
                                                                                // 0xf (1111) AND 0001 = 0001 (1)				
   	0x00000000004010b1 <+54>:	mov    %eax,(%rsp)     			// 5 is moved to (%rsp)
   	0x00000000004010b4 <+57>:	cmp    $0xf,%eax         		// 0xf (15) is compared with the values stored in %eax (5)
   	0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>   			
   	
    	//If the values are equal, explode bomb function is called else it jumps to next instruction. 
   	
   	0x00000000004010b9 <+62>:	mov    $0x0,%ecx     			//0 is moved to %ecx
   	0x00000000004010be <+67>:	mov    $0x0,%edx			// 0 is moved to %edx
=>  	0x00000000004010c3 <+72>:	add    $0x1,%edx     			// ADD instruction performed with the value stored in %edx  (0) and 1 and then stored in %edx. 				
   	0x00000000004010c6 <+75>:	cltq                			// specialized movs that operates %rax and does sign extension in place on %rax
   	

        // After that it exist from the loop and executes the next instruction.   	
   	
   	0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax      			
=>  	0x00000000004010cf <+84>:	add    %eax,%ecx      			// ADD operation performed
   	0x00000000004010d1 <+86>:	cmp    $0xf,%eax       					
   	0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>   		// if the values are not equal jump back to +72
 
 
        //%eax= 12, %ecx = 0. 12 + 0 = 12 -> stored in %ecx and compares the value stored in %eax (12) and 0xf(15). 
        //It loops till the value becomes 15. 

	
   	0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)      		// 15 is moved to (%rsp)
=>  	0x00000000004010dd <+98>:	cmp    $0xf,%edx       			//15 is compared with the value stored in %edx(15).
   	0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>   
   	 
       //If the values are equal it jumps to next instruction else it calls explode bomb function. 
       //From here we can confirm the first input.

   	 			
=>  	0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx     		//p/x * (int *)($rsp + 0x4) gives 2 (User input value)
   	0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>      	// If the values are equal, it jumps from explode bomb function
   	0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   	
       // Second value (2) is compared with the value stored in %ecx which is 115. 
       //If the values are equal, it jumps to the next instruction else it calls explode bomb function. 
       //From here the second value is confirmed.
   	
   	
   	0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   	0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   	0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   	0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   	0x0000000000401102 <+135>:	add    $0x18,%rsp
   	0x0000000000401106 <+139>:	retq 


(gdb) delete break
Delete all breakpoints? (y or n) y
(gdb) r result.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/samty/Desktop/Assignment 1_2/Assignment 1/bomb003/bomb result.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
2 798
Halfway there!
4 2
So you got that one.  Try this one.
5 115
Good work!  On to the next...  //phase 5 defused


To conclude:
Two inputs are entered. 
To get the first value, the first input is compared with 15 and based on the first input, it loops in the code till the value generates 15. 
Then it jumps out of the loop and compares the generated value with 15. 
From here we get the first value which is 5. 
Based on the first value, second value is calculated and then generated which is 115.






